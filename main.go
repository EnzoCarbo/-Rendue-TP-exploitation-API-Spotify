package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"html/template"
	"io"
	"net/http"
	"os"
	"strings"
	"time"
)

type AlbumJulSpotify struct {
	Items []struct {
		Name        string `json:"name"`
		AlbumImages []struct {
			Height int    `json:"height"`
			Url    string `json:"url"`
			Width  int    `json:"width"`
		} `json:"images"`
		ReleaseDate string `json:"release_date"`
		TotalTracks int    `json:"total_tracks"`
	} `json:"items"`
}

type TrackSdm struct {
	Album struct {
		Name         string `json:"name"`
		Release_date string `json:"release_date"`
		AlbumImages  []struct {
			Height int    `json:"height"`
			Url    string `json:"url"`
			Width  int    `json:"width"`
		} `json:"images"`
	} `json:"album"`
	TrackName string `json:"name"`
	Artist    []struct {
		Name string `json:"name"`
	} `json:"artists"`
	External_urls struct {
		Spotify string `json:"spotify"`
	}
}

const clientID = "7fad12d4cf574ff49ecc60182e30a9ff"
const clientSecret = "830a53eef6a24007945a97a03cbd3265"

func getAccessToken() (string, error) {
	clientCreds := fmt.Sprintf("%s:%s", clientID, clientSecret)
	clientCredsB64 := base64.StdEncoding.EncodeToString([]byte(clientCreds))

	tokenURL := "https://accounts.spotify.com/api/token"

	tokenData := strings.NewReader("grant_type=client_credentials")

	tokenHeaders := map[string]string{
		"Authorization": "Basic " + clientCredsB64,
		"Content-Type":  "application/x-www-form-urlencoded",
	}

	req, err := http.NewRequest("POST", tokenURL, tokenData)
	if err != nil {
		return "", err
	}

	for key, value := range tokenHeaders {
		req.Header.Set(key, value)
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// Vérification de la réponse
	if resp.StatusCode == http.StatusOK {
		var tokenResponse map[string]interface{}
		err := json.NewDecoder(resp.Body).Decode(&tokenResponse)
		if err != nil {
			return "", err
		}

		accessToken, ok := tokenResponse["access_token"].(string)
		if !ok {
			return "", fmt.Errorf("token d'accès non trouvé")
		}
		return accessToken, nil
	}

	return "", fmt.Errorf("échec de l'obtention du token d'accès: %s", resp.Status)
}

func callJul() (AlbumJulSpotify, error) {
	urlApi := "https://api.spotify.com/v1/artists/3IW7ScrzXmPvZhB27hmfgy/albums"

	// Obtenez le token d'accès
	accessToken, err := getAccessToken()
	if err != nil {
		return AlbumJulSpotify{}, fmt.Errorf("Erreur lors de la récupération du token d'accès : %s", err.Error())
	}

	httpClient := http.Client{
		Timeout: time.Second * 30,
	}

	req, errReq := http.NewRequest(http.MethodGet, urlApi, nil)
	if errReq != nil {
		return AlbumJulSpotify{}, fmt.Errorf("Oups il y a un problème avec la requête : %s", errReq.Error())
	}

	req.Header.Set("User_Agent", "Caterpie")
	req.Header.Set("Authorization", "Bearer "+accessToken)

	res, errRes := httpClient.Do(req)
	if errRes != nil {
		return AlbumJulSpotify{}, fmt.Errorf("Oups il y a un problème avec l'envoi de la requête : %s", errRes.Error())
	}
	defer res.Body.Close()

	body, errBody := io.ReadAll(res.Body)
	if errBody != nil {
		return AlbumJulSpotify{}, fmt.Errorf("Oups il y a un problème avec la lecture du corps : %s", errBody.Error())
	}

	var decodeDataJul AlbumJulSpotify
	err = json.Unmarshal(body, &decodeDataJul)
	if err != nil {
		return AlbumJulSpotify{}, fmt.Errorf("Oups il y a un problème avec la décodage des données : %s", err.Error())
	}

	for _, album := range decodeDataJul.Items {
		fmt.Println("Nom de l'album: ", album.Name)
		fmt.Println("Date de sortie: ", album.ReleaseDate)
		fmt.Println("Nombre de pistes: ", album.TotalTracks)
		fmt.Println("Image de couverture: ", album.AlbumImages[0].Url)
		fmt.Println("------------------------------")
	}
	return decodeDataJul, nil
}

func callSdm() (TrackSdm, error) {
	urlApi := "https://api.spotify.com/v1/tracks/0EzNyXyU7gHzj2TN8qYThj"

	// Obtenez le token d'accès
	accessToken, err := getAccessToken()
	if err != nil {
		return TrackSdm{}, fmt.Errorf("Erreur lors de la récupération du token d'accès : %s", err.Error())
	}

	httpClient := http.Client{
		Timeout: time.Second * 30,
	}

	req, errReq := http.NewRequest(http.MethodGet, urlApi, nil)
	if errReq != nil {
		return TrackSdm{}, fmt.Errorf("Oups il y a un problème avec la requête : %s", errReq.Error())
	}

	req.Header.Set("User_Agent", "Caterpie")
	req.Header.Set("Authorization", "Bearer "+accessToken)

	res, errRes := httpClient.Do(req)
	if errRes != nil {
		return TrackSdm{}, fmt.Errorf("Oups il y a un problème avec l'envoi de la requête : %s", errRes.Error())
	}
	defer res.Body.Close()

	body, errBody := io.ReadAll(res.Body)
	if errBody != nil {
		return TrackSdm{}, fmt.Errorf("Oups il y a un problème avec la lecture du corps : %s", errBody.Error())
	}

	var decodeDataSdm TrackSdm
	err = json.Unmarshal(body, &decodeDataSdm)
	if err != nil {
		return TrackSdm{}, fmt.Errorf("Oups il y a un problème avec la décodage des données : %s", err.Error())
	}

	fmt.Println("Nom de l'album: ", decodeDataSdm.Album.Name)
	fmt.Println("Date de sortie: ", decodeDataSdm.Album.Release_date)
	fmt.Println("Nom du titre: ", decodeDataSdm.TrackName)
	fmt.Println("Nom de l'artiste: ", decodeDataSdm.Artist)
	fmt.Println("Couverture de l'album: ", decodeDataSdm.Album.AlbumImages)
	fmt.Println("Lien URL ", decodeDataSdm.External_urls)
	fmt.Println("------------------------------")

	link := decodeDataSdm.External_urls.Spotify

	fmt.Println(link)

	return decodeDataSdm, nil
}

func main() {
	temp, err := template.ParseGlob("./templates/*.html")
	if err != nil {
		fmt.Printf(fmt.Sprintf("ERREUR => %s", err.Error()))
		return
	}

	http.HandleFunc("/main", func(w http.ResponseWriter, r *http.Request) {
		temp.ExecuteTemplate(w, "main", nil)
	})

	http.HandleFunc("/album/jul", func(w http.ResponseWriter, r *http.Request) {
		albums, err := callJul()
		if err != nil {
			http.Error(w, fmt.Sprintf("Erreur lors de la récupération des albums : %s", err.Error()), http.StatusMovedPermanently)
			return
		}
		temp.ExecuteTemplate(w, "jul", albums.Items)
	})

	http.HandleFunc("/track/sdm", func(w http.ResponseWriter, r *http.Request) {
		TrackSdm, err := callSdm()
		if err != nil {
			http.Error(w, fmt.Sprintf("Erreur lors de la récupération des albums : %s", err.Error()), http.StatusMovedPermanently)
			return
		}
		temp.ExecuteTemplate(w, "sdm", TrackSdm)
	})

	http.HandleFunc("/getAccessToken", func(w http.ResponseWriter, r *http.Request) {
		accessToken, err := getAccessToken()
		if err != nil {
			http.Error(w, fmt.Sprintf("Erreur lors de la récupération du token d'accès: %s", err.Error()), http.StatusMovedPermanently)
			return
		}
		fmt.Println("Token d'accès Spotify: " + accessToken)
	})

	rootDoc, _ := os.Getwd()
	fileserver := http.FileServer(http.Dir(rootDoc + "/asset"))
	http.Handle("/static/", http.StripPrefix("/static/", fileserver))
	http.ListenAndServe("localhost:8080", nil)
}
