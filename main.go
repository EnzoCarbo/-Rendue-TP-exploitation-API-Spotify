package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"html/template"
	"net/http"
	"os"
	"strings"
)

const clientID = "7fad12d4cf574ff49ecc60182e30a9ff"
const clientSecret = "830a53eef6a24007945a97a03cbd3265"

func getAccessToken() (string, error) {
	clientCreds := fmt.Sprintf("%s:%s", clientID, clientSecret)
	clientCredsB64 := base64.StdEncoding.EncodeToString([]byte(clientCreds))

	tokenURL := "https://accounts.spotify.com/api/token"

	tokenData := strings.NewReader("grant_type=client_credentials")

	tokenHeaders := map[string]string{
		"Authorization": "Basic " + clientCredsB64,
		"Content-Type":  "application/x-www-form-urlencoded",
	}

	req, err := http.NewRequest("POST", tokenURL, tokenData)
	if err != nil {
		return "", err
	}

	for key, value := range tokenHeaders {
		req.Header.Set(key, value)
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// Vérification de la réponse
	if resp.StatusCode == http.StatusOK {
		var tokenResponse map[string]interface{}
		err := json.NewDecoder(resp.Body).Decode(&tokenResponse)
		if err != nil {
			return "", err
		}

		accessToken, ok := tokenResponse["access_token"].(string)
		if !ok {
			return "", fmt.Errorf("token d'accès non trouvé")
		}
		return accessToken, nil
	}

	return "", fmt.Errorf("échec de l'obtention du token d'accès: %s", resp.Status)
}

func main() {

	temp, err := template.ParseGlob("./templates/*.html")
	if err != nil {
		fmt.Printf(fmt.Sprintf("ERREUR => %s", err.Error()))
		return
	}
	http.HandleFunc("/main", func(w http.ResponseWriter, r *http.Request) {
		temp.ExecuteTemplate(w, "main", nil)

	})

	http.HandleFunc("/album/jul", func(w http.ResponseWriter, r *http.Request) {
		temp.ExecuteTemplate(w, "jul", nil)

	})

	http.HandleFunc("/track/sdm", func(w http.ResponseWriter, r *http.Request) {
		temp.ExecuteTemplate(w, "sdm", nil)
	})

	http.HandleFunc("/getAccessToken", func(w http.ResponseWriter, r *http.Request) {
		accessToken, err := getAccessToken()
		if err != nil {
			http.Error(w, fmt.Sprintf("Erreur lors de la récupération du token d'accès: %s", err.Error()), http.StatusMovedPermanently)
			return
		}
		fmt.Println("Token d'accès Spotify: " + accessToken)
	})

	rootDoc, _ := os.Getwd()
	fileserver := http.FileServer(http.Dir(rootDoc + "/asset"))
	http.Handle("/static/", http.StripPrefix("/static/", fileserver))
	//Init serv
	http.ListenAndServe("localhost:8080", nil)
}
